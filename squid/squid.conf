## general options
cache_mgr alexeyv@fornova.net
client_db on
netdb_filename stdio:/var/cache/squid4/netdb.state

collapsed_forwarding on
detect_broken_pconn on
dns_defnames on
dns_retransmit_interval 2 seconds
dns_timeout 5 minutes

half_closed_clients off
httpd_suppress_version_string on
ignore_unknown_nameservers on
pipeline_prefetch on
retry_on_error on
uri_whitespace strip
http_accel_surrogate_remote off


## timeouts
# This parameter specifies how long Squid should at most attempt in
# finding a forwarding path for the request before giving up.
forward_timeout 4 minute

# This parameter specifies how long to wait for the TCP connect to
# the requested server or peer to complete before Squid should
# attempt to find another path where to forward the request.
connect_timeout 1 minute


# After each successful read(), the timeout will be extended by this
# amount.  If no data is read again after this amount of time,
# the request is aborted and logged with ERR_READ_TIMEOUT.
read_timeout 15 minute

# How long to wait for complete HTTP request headers after initial
# connection establishment.
request_timeout 5 minute


# The cache by default continues downloading aborted requests
# which are almost completed (less than 16 KB remaining). This
# may be undesirable on slow (e.g. SLIP) links and/or very busy
# caches.  Impatient users may tie up file descriptors and
# bandwidth by repeatedly requesting and immediately aborting
# downloads.
# When the user aborts a request, Squid will check the
# quick_abort values to the amount of data transferred until
# then.
# If the transfer has less than 'quick_abort_min' KB remaining,
# it will finish the retrieval.
# If the transfer has more than 'quick_abort_max' KB remaining,
# it will abort the retrieval.
# If more than 'quick_abort_pct' of the transfer has completed,
# it will finish the retrieval.
# If you do not want any retrieval to continue after the client
# has aborted, set both 'quick_abort_min' and 'quick_abort_max'
# to '0 KB'.
# If you want retrievals to always continue if they are being
# cached set 'quick_abort_min' to '-1 KB'.
quick_abort_min 16 KB

#The maximum amount of time a client (browser) is allowed to
#remain connected to the cache process.  This protects the Cache
#from having a lot of sockets (and hence file descriptors) tied up
#in a CLOSE_WAIT state from remote clients that go away without
#properly shutting down (either because of a network failure or
#because of a poor client implementation).  The default is one
#day, 1440 minutes.
client_lifetime 10 minute


## proxy server client access
# acl mynetworks src 127.0.0.0/8 10.10.10.0/28 192.168.0.0/16 172.0.0.0/8
# http_access deny !mynetworks

## max connections per ip
# acl maxuserconn src 127.0.0.0/8 10.0.10.0/28
# acl limitusercon maxconn 500
# http_access deny maxuserconn limitusercon

## disable multicast icp
icp_port 0
icp_access deny all

## disable ident lookups
ident_lookup_access deny all

## logs
logformat combined [%tl] %>A %{Host}>h "%rm %ru HTTP/%rv" %Hs %<st "%{Referer}>h" "%{User-Agent}>h" %Ss:%Sh
logfile_rotate 0
access_log stdio:/dev/stdout combined
cache_store_log stdio:/dev/stdout
cache_log /dev/stderr

#access_log /var/log/squid4/access.log combined
#cache_store_log /var/log/squid4/store.log
#cache_log  /var/log/squid4/cache.log
#logfile_rotate 8

## ports allowed
acl Safe_ports port 80              # http
acl Safe_ports port 21              # ftp
acl Safe_ports port 443 563 8014    # https, snews
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports

http_access deny !Safe_ports

## ssl ports/method allowed
acl SSL_ports port 443 8014
acl CONNECT method CONNECT
http_access deny CONNECT !SSL_ports

## protocols allowed
# acl Safe_proto proto HTTP SSL
# http_access deny !Safe_proto

## browsers allowed
# acl Safe_browser browser ^Mozilla/5\.0.*Firefox/2\.0\.0\.6
# http_access deny !Safe_Browser

## disable ads ( //squid_adservers.html )
# acl ads dstdom_regex "/etc/squid4/ad_block.txt"
# http_access deny ads
# deny_info TCP_RESET ads

## Banned Sites
# acl Bad_Site dstdom_regex myspace.com youtube.com facebook.com
# http_access deny Bad_Site

## methods allowed
# acl Safe_method method CONNECT GET HEAD POST
# http_access deny !Safe_method

## allow replies to client requests
http_reply_access allow all

# Cache directory is fixed since we'll bind mount.
cache_dir aufs /var/cache/squid4 40000 16 256
maximum_object_size 1536 MB
cache_mem 128 MB

cache_peer 172.17.0.2 parent 8013 0 no-query \
                      login=PASSTHRU \
                      no-digest no-netdb-exchange \
                      no-tproxy default name=HAPROXY

cache_peer 172.17.0.2 parent 8014 0 ssl name=HAPROXYHTTPS

auth_param basic credentialsttl 0
authenticate_cache_garbage_interval 0 hour


# Pass http port 80 to haproxy, https should not be passed here, because there
# is a problem in squid4 to pass https to upstream proxy with ssl_bump (MITM)
# https will be passed by proxychains service.
acl PORT_80 port 80
never_direct allow PORT_80
cache_peer_access HAPROXY allow PORT_80

#deny_direct allow SSL_ports
#cache_peer_access HAPROXYHTTPS allow SSL_ports

tls_outgoing_options capath=/etc/ssl/certs \
    options=NO_SSLv3,NO_TLSv1 \
    cipher=ALL:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS \
    flags=DONT_VERIFY_PEER,DONT_VERIFY_DOMAIN \
    options=ALL

http_port 3128

http_port 3129 ssl-bump \
    generate-host-certificates=off \
    dynamic_cert_mem_cache_size=100MB \
    cert=/etc/squid4/ssl_cert/mitm.crt \
    key=/etc/squid4/ssl_cert/mitm.pem

#url_rewrite_extras "%>a %>rm %un"
#url_rewrite_children 3 startup=0 idle=1 concurrency=10
#url_rewrite_program /rewrite_url.py

sslproxy_flags DONT_VERIFY_PEER
sslproxy_cert_error allow all
ssl_bump server-first all
ssl_bump splice all

http_access allow all
host_verify_strict off

# Hide client IP
forwarded_for delete
follow_x_forwarded_for deny all
via off

#request_header_access From deny all
#request_header_access X-Forwarded-For deny all
#request_header_access Server deny all
#request_header_access Via deny all
#request_header_access Link deny all
#request_header_access Remote-Address deny all
#request_header_access Referer deny all
#request_header_access Surrogate-Capability deny all
#request_header_access All allow all

#reply_header_access Via deny all
#reply_header_access WWW-Authenticate deny all
#reply_header_access Link deny all
#reply_header_access X-Cache deny all
